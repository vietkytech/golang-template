// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: multirr/multirr_svc.proto

package multirr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{0}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{1}
}

func (x *HealthCheckResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetRRTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRRTemplateRequest) Reset() {
	*x = GetRRTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRRTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRRTemplateRequest) ProtoMessage() {}

func (x *GetRRTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRRTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetRRTemplateRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{2}
}

func (x *GetRRTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRRTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *RRTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *GetRRTemplateResponse) Reset() {
	*x = GetRRTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRRTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRRTemplateResponse) ProtoMessage() {}

func (x *GetRRTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRRTemplateResponse.ProtoReflect.Descriptor instead.
func (*GetRRTemplateResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{3}
}

func (x *GetRRTemplateResponse) GetTemplate() *RRTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type GetAllRRTemplatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Query  string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetAllRRTemplatesRequest) Reset() {
	*x = GetAllRRTemplatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRRTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRRTemplatesRequest) ProtoMessage() {}

func (x *GetAllRRTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRRTemplatesRequest.ProtoReflect.Descriptor instead.
func (*GetAllRRTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllRRTemplatesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllRRTemplatesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetAllRRTemplatesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type GetAllRRTemplatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int32         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	TemplateList []*RRTemplate `protobuf:"bytes,2,rep,name=templateList,proto3" json:"templateList,omitempty"`
}

func (x *GetAllRRTemplatesResponse) Reset() {
	*x = GetAllRRTemplatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRRTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRRTemplatesResponse) ProtoMessage() {}

func (x *GetAllRRTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRRTemplatesResponse.ProtoReflect.Descriptor instead.
func (*GetAllRRTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllRRTemplatesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetAllRRTemplatesResponse) GetTemplateList() []*RRTemplate {
	if x != nil {
		return x.TemplateList
	}
	return nil
}

type CreateRRTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *RRTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *CreateRRTemplateRequest) Reset() {
	*x = CreateRRTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRRTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRRTemplateRequest) ProtoMessage() {}

func (x *CreateRRTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRRTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateRRTemplateRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRRTemplateRequest) GetTemplate() *RRTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type CreateRRTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CreateRRTemplateResponse) Reset() {
	*x = CreateRRTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRRTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRRTemplateResponse) ProtoMessage() {}

func (x *CreateRRTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRRTemplateResponse.ProtoReflect.Descriptor instead.
func (*CreateRRTemplateResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRRTemplateResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type UpdateRRTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *RRTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *UpdateRRTemplateRequest) Reset() {
	*x = UpdateRRTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRRTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRRTemplateRequest) ProtoMessage() {}

func (x *UpdateRRTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRRTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRRTemplateRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRRTemplateRequest) GetTemplate() *RRTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type UpdateRRTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UpdateRRTemplateResponse) Reset() {
	*x = UpdateRRTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRRTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRRTemplateResponse) ProtoMessage() {}

func (x *UpdateRRTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRRTemplateResponse.ProtoReflect.Descriptor instead.
func (*UpdateRRTemplateResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRRTemplateResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type DeleteRRTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRRTemplateRequest) Reset() {
	*x = DeleteRRTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRRTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRRTemplateRequest) ProtoMessage() {}

func (x *DeleteRRTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRRTemplateRequest.ProtoReflect.Descriptor instead.
func (*DeleteRRTemplateRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRRTemplateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRRTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DeleteRRTemplateResponse) Reset() {
	*x = DeleteRRTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRRTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRRTemplateResponse) ProtoMessage() {}

func (x *DeleteRRTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRRTemplateResponse.ProtoReflect.Descriptor instead.
func (*DeleteRRTemplateResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRRTemplateResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type GetAdsRRsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID int64      `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Query     *AdRRQuery `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetAdsRRsRequest) Reset() {
	*x = GetAdsRRsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdsRRsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdsRRsRequest) ProtoMessage() {}

func (x *GetAdsRRsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdsRRsRequest.ProtoReflect.Descriptor instead.
func (*GetAdsRRsRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{12}
}

func (x *GetAdsRRsRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *GetAdsRRsRequest) GetQuery() *AdRRQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetAdsRRsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultList *AdRR `protobuf:"bytes,1,opt,name=resultList,proto3" json:"resultList,omitempty"`
}

func (x *GetAdsRRsResponse) Reset() {
	*x = GetAdsRRsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAdsRRsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAdsRRsResponse) ProtoMessage() {}

func (x *GetAdsRRsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAdsRRsResponse.ProtoReflect.Descriptor instead.
func (*GetAdsRRsResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{13}
}

func (x *GetAdsRRsResponse) GetResultList() *AdRR {
	if x != nil {
		return x.ResultList
	}
	return nil
}

type CheckAdsRRsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID int64        `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Queries   []*AdRRQuery `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *CheckAdsRRsRequest) Reset() {
	*x = CheckAdsRRsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAdsRRsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdsRRsRequest) ProtoMessage() {}

func (x *CheckAdsRRsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdsRRsRequest.ProtoReflect.Descriptor instead.
func (*CheckAdsRRsRequest) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{14}
}

func (x *CheckAdsRRsRequest) GetAccountID() int64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *CheckAdsRRsRequest) GetQueries() []*AdRRQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type CheckAdsRRsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultList []*AdRR `protobuf:"bytes,1,rep,name=resultList,proto3" json:"resultList,omitempty"`
}

func (x *CheckAdsRRsResponse) Reset() {
	*x = CheckAdsRRsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAdsRRsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAdsRRsResponse) ProtoMessage() {}

func (x *CheckAdsRRsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAdsRRsResponse.ProtoReflect.Descriptor instead.
func (*CheckAdsRRsResponse) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{15}
}

func (x *CheckAdsRRsResponse) GetResultList() []*AdRR {
	if x != nil {
		return x.ResultList
	}
	return nil
}

type AdRRQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdID     int64 `protobuf:"varint,1,opt,name=adID,proto3" json:"adID,omitempty"`
	ActionID int32 `protobuf:"varint,2,opt,name=actionID,proto3" json:"actionID,omitempty"`
}

func (x *AdRRQuery) Reset() {
	*x = AdRRQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdRRQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdRRQuery) ProtoMessage() {}

func (x *AdRRQuery) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdRRQuery.ProtoReflect.Descriptor instead.
func (*AdRRQuery) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{16}
}

func (x *AdRRQuery) GetAdID() int64 {
	if x != nil {
		return x.AdID
	}
	return 0
}

func (x *AdRRQuery) GetActionID() int32 {
	if x != nil {
		return x.ActionID
	}
	return 0
}

type RRTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReasonID      string `protobuf:"bytes,1,opt,name=reasonID,proto3" json:"reasonID,omitempty"`
	TemplateValue string `protobuf:"bytes,2,opt,name=templateValue,proto3" json:"templateValue,omitempty"`
	Editable      bool   `protobuf:"varint,3,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *RRTemplate) Reset() {
	*x = RRTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRTemplate) ProtoMessage() {}

func (x *RRTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRTemplate.ProtoReflect.Descriptor instead.
func (*RRTemplate) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{17}
}

func (x *RRTemplate) GetReasonID() string {
	if x != nil {
		return x.ReasonID
	}
	return ""
}

func (x *RRTemplate) GetTemplateValue() string {
	if x != nil {
		return x.TemplateValue
	}
	return ""
}

func (x *RRTemplate) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

type AdRR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdID       int64  `protobuf:"varint,1,opt,name=adID,proto3" json:"adID,omitempty"`
	ActionID   int32  `protobuf:"varint,2,opt,name=actionID,proto3" json:"actionID,omitempty"`
	ReasonID   string `protobuf:"bytes,3,opt,name=reasonID,proto3" json:"reasonID,omitempty"`
	ReasonText string `protobuf:"bytes,4,opt,name=reasonText,proto3" json:"reasonText,omitempty"`
	Editable   bool   `protobuf:"varint,5,opt,name=editable,proto3" json:"editable,omitempty"`
}

func (x *AdRR) Reset() {
	*x = AdRR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multirr_multirr_svc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdRR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdRR) ProtoMessage() {}

func (x *AdRR) ProtoReflect() protoreflect.Message {
	mi := &file_multirr_multirr_svc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdRR.ProtoReflect.Descriptor instead.
func (*AdRR) Descriptor() ([]byte, []int) {
	return file_multirr_multirr_svc_proto_rawDescGZIP(), []int{18}
}

func (x *AdRR) GetAdID() int64 {
	if x != nil {
		return x.AdID
	}
	return 0
}

func (x *AdRR) GetActionID() int32 {
	if x != nil {
		return x.ActionID
	}
	return 0
}

func (x *AdRR) GetReasonID() string {
	if x != nil {
		return x.ReasonID
	}
	return ""
}

func (x *AdRR) GetReasonText() string {
	if x != nil {
		return x.ReasonText
	}
	return ""
}

func (x *AdRR) GetEditable() bool {
	if x != nil {
		return x.Editable
	}
	return false
}

var File_multirr_multirr_svc_proto protoreflect.FileDescriptor

var file_multirr_multirr_svc_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x72, 0x72, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x72,
	0x72, 0x5f, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x27, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x52, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x6f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x4f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x52, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22,
	0x4f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x52, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x22, 0x2c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x29,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x73, 0x52, 0x52, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x52, 0x52, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x73, 0x52, 0x52, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x52, 0x52, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x65, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x73, 0x52, 0x52, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x52, 0x52, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x64, 0x73, 0x52, 0x52, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x64, 0x52, 0x52, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x09, 0x41, 0x64, 0x52, 0x52, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x61, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x6a, 0x0a, 0x0a, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a,
	0x04, 0x41, 0x64, 0x52, 0x52, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x61, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0xeb, 0x05,
	0x0a, 0x0a, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x53, 0x76, 0x63, 0x12, 0x52, 0x0a, 0x0b,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x26, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x52, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x52, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x73, 0x52, 0x52, 0x73, 0x12, 0x1e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x52, 0x52, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x73, 0x52, 0x52, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x64, 0x73, 0x52, 0x52, 0x73, 0x12, 0x20, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x52,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x73, 0x52, 0x52,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x52, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x73,
	0x52, 0x52, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x72, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multirr_multirr_svc_proto_rawDescOnce sync.Once
	file_multirr_multirr_svc_proto_rawDescData = file_multirr_multirr_svc_proto_rawDesc
)

func file_multirr_multirr_svc_proto_rawDescGZIP() []byte {
	file_multirr_multirr_svc_proto_rawDescOnce.Do(func() {
		file_multirr_multirr_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_multirr_multirr_svc_proto_rawDescData)
	})
	return file_multirr_multirr_svc_proto_rawDescData
}

var file_multirr_multirr_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_multirr_multirr_svc_proto_goTypes = []interface{}{
	(*HealthCheckRequest)(nil),        // 0: MultiRRProto.HealthCheckRequest
	(*HealthCheckResponse)(nil),       // 1: MultiRRProto.HealthCheckResponse
	(*GetRRTemplateRequest)(nil),      // 2: MultiRRProto.GetRRTemplateRequest
	(*GetRRTemplateResponse)(nil),     // 3: MultiRRProto.GetRRTemplateResponse
	(*GetAllRRTemplatesRequest)(nil),  // 4: MultiRRProto.GetAllRRTemplatesRequest
	(*GetAllRRTemplatesResponse)(nil), // 5: MultiRRProto.GetAllRRTemplatesResponse
	(*CreateRRTemplateRequest)(nil),   // 6: MultiRRProto.CreateRRTemplateRequest
	(*CreateRRTemplateResponse)(nil),  // 7: MultiRRProto.CreateRRTemplateResponse
	(*UpdateRRTemplateRequest)(nil),   // 8: MultiRRProto.UpdateRRTemplateRequest
	(*UpdateRRTemplateResponse)(nil),  // 9: MultiRRProto.UpdateRRTemplateResponse
	(*DeleteRRTemplateRequest)(nil),   // 10: MultiRRProto.DeleteRRTemplateRequest
	(*DeleteRRTemplateResponse)(nil),  // 11: MultiRRProto.DeleteRRTemplateResponse
	(*GetAdsRRsRequest)(nil),          // 12: MultiRRProto.GetAdsRRsRequest
	(*GetAdsRRsResponse)(nil),         // 13: MultiRRProto.GetAdsRRsResponse
	(*CheckAdsRRsRequest)(nil),        // 14: MultiRRProto.CheckAdsRRsRequest
	(*CheckAdsRRsResponse)(nil),       // 15: MultiRRProto.CheckAdsRRsResponse
	(*AdRRQuery)(nil),                 // 16: MultiRRProto.AdRRQuery
	(*RRTemplate)(nil),                // 17: MultiRRProto.RRTemplate
	(*AdRR)(nil),                      // 18: MultiRRProto.AdRR
}
var file_multirr_multirr_svc_proto_depIdxs = []int32{
	17, // 0: MultiRRProto.GetRRTemplateResponse.template:type_name -> MultiRRProto.RRTemplate
	17, // 1: MultiRRProto.GetAllRRTemplatesResponse.templateList:type_name -> MultiRRProto.RRTemplate
	17, // 2: MultiRRProto.CreateRRTemplateRequest.template:type_name -> MultiRRProto.RRTemplate
	17, // 3: MultiRRProto.UpdateRRTemplateRequest.template:type_name -> MultiRRProto.RRTemplate
	16, // 4: MultiRRProto.GetAdsRRsRequest.query:type_name -> MultiRRProto.AdRRQuery
	18, // 5: MultiRRProto.GetAdsRRsResponse.resultList:type_name -> MultiRRProto.AdRR
	16, // 6: MultiRRProto.CheckAdsRRsRequest.queries:type_name -> MultiRRProto.AdRRQuery
	18, // 7: MultiRRProto.CheckAdsRRsResponse.resultList:type_name -> MultiRRProto.AdRR
	0,  // 8: MultiRRProto.MultiRRSvc.HealthCheck:input_type -> MultiRRProto.HealthCheckRequest
	2,  // 9: MultiRRProto.MultiRRSvc.GetRRTemplate:input_type -> MultiRRProto.GetRRTemplateRequest
	4,  // 10: MultiRRProto.MultiRRSvc.GetAllRRTemplates:input_type -> MultiRRProto.GetAllRRTemplatesRequest
	6,  // 11: MultiRRProto.MultiRRSvc.CreateRRTemplate:input_type -> MultiRRProto.CreateRRTemplateRequest
	8,  // 12: MultiRRProto.MultiRRSvc.UpdateRRTemplate:input_type -> MultiRRProto.UpdateRRTemplateRequest
	10, // 13: MultiRRProto.MultiRRSvc.DeleteRRTemplate:input_type -> MultiRRProto.DeleteRRTemplateRequest
	12, // 14: MultiRRProto.MultiRRSvc.GetAdsRRs:input_type -> MultiRRProto.GetAdsRRsRequest
	14, // 15: MultiRRProto.MultiRRSvc.CheckAdsRRs:input_type -> MultiRRProto.CheckAdsRRsRequest
	1,  // 16: MultiRRProto.MultiRRSvc.HealthCheck:output_type -> MultiRRProto.HealthCheckResponse
	3,  // 17: MultiRRProto.MultiRRSvc.GetRRTemplate:output_type -> MultiRRProto.GetRRTemplateResponse
	5,  // 18: MultiRRProto.MultiRRSvc.GetAllRRTemplates:output_type -> MultiRRProto.GetAllRRTemplatesResponse
	7,  // 19: MultiRRProto.MultiRRSvc.CreateRRTemplate:output_type -> MultiRRProto.CreateRRTemplateResponse
	9,  // 20: MultiRRProto.MultiRRSvc.UpdateRRTemplate:output_type -> MultiRRProto.UpdateRRTemplateResponse
	11, // 21: MultiRRProto.MultiRRSvc.DeleteRRTemplate:output_type -> MultiRRProto.DeleteRRTemplateResponse
	13, // 22: MultiRRProto.MultiRRSvc.GetAdsRRs:output_type -> MultiRRProto.GetAdsRRsResponse
	15, // 23: MultiRRProto.MultiRRSvc.CheckAdsRRs:output_type -> MultiRRProto.CheckAdsRRsResponse
	16, // [16:24] is the sub-list for method output_type
	8,  // [8:16] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_multirr_multirr_svc_proto_init() }
func file_multirr_multirr_svc_proto_init() {
	if File_multirr_multirr_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_multirr_multirr_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRRTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRRTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRRTemplatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRRTemplatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRRTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRRTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRRTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRRTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRRTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRRTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdsRRsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAdsRRsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAdsRRsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAdsRRsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdRRQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RRTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multirr_multirr_svc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdRR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multirr_multirr_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multirr_multirr_svc_proto_goTypes,
		DependencyIndexes: file_multirr_multirr_svc_proto_depIdxs,
		MessageInfos:      file_multirr_multirr_svc_proto_msgTypes,
	}.Build()
	File_multirr_multirr_svc_proto = out.File
	file_multirr_multirr_svc_proto_rawDesc = nil
	file_multirr_multirr_svc_proto_goTypes = nil
	file_multirr_multirr_svc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MultiRRSvcClient is the client API for MultiRRSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiRRSvcClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetRRTemplate(ctx context.Context, in *GetRRTemplateRequest, opts ...grpc.CallOption) (*GetRRTemplateResponse, error)
	GetAllRRTemplates(ctx context.Context, in *GetAllRRTemplatesRequest, opts ...grpc.CallOption) (*GetAllRRTemplatesResponse, error)
	CreateRRTemplate(ctx context.Context, in *CreateRRTemplateRequest, opts ...grpc.CallOption) (*CreateRRTemplateResponse, error)
	UpdateRRTemplate(ctx context.Context, in *UpdateRRTemplateRequest, opts ...grpc.CallOption) (*UpdateRRTemplateResponse, error)
	DeleteRRTemplate(ctx context.Context, in *DeleteRRTemplateRequest, opts ...grpc.CallOption) (*DeleteRRTemplateResponse, error)
	GetAdsRRs(ctx context.Context, in *GetAdsRRsRequest, opts ...grpc.CallOption) (*GetAdsRRsResponse, error)
	CheckAdsRRs(ctx context.Context, in *CheckAdsRRsRequest, opts ...grpc.CallOption) (*CheckAdsRRsResponse, error)
}

type multiRRSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiRRSvcClient(cc grpc.ClientConnInterface) MultiRRSvcClient {
	return &multiRRSvcClient{cc}
}

func (c *multiRRSvcClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetRRTemplate(ctx context.Context, in *GetRRTemplateRequest, opts ...grpc.CallOption) (*GetRRTemplateResponse, error) {
	out := new(GetRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetAllRRTemplates(ctx context.Context, in *GetAllRRTemplatesRequest, opts ...grpc.CallOption) (*GetAllRRTemplatesResponse, error) {
	out := new(GetAllRRTemplatesResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetAllRRTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) CreateRRTemplate(ctx context.Context, in *CreateRRTemplateRequest, opts ...grpc.CallOption) (*CreateRRTemplateResponse, error) {
	out := new(CreateRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/CreateRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) UpdateRRTemplate(ctx context.Context, in *UpdateRRTemplateRequest, opts ...grpc.CallOption) (*UpdateRRTemplateResponse, error) {
	out := new(UpdateRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/UpdateRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) DeleteRRTemplate(ctx context.Context, in *DeleteRRTemplateRequest, opts ...grpc.CallOption) (*DeleteRRTemplateResponse, error) {
	out := new(DeleteRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/DeleteRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetAdsRRs(ctx context.Context, in *GetAdsRRsRequest, opts ...grpc.CallOption) (*GetAdsRRsResponse, error) {
	out := new(GetAdsRRsResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetAdsRRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) CheckAdsRRs(ctx context.Context, in *CheckAdsRRsRequest, opts ...grpc.CallOption) (*CheckAdsRRsResponse, error) {
	out := new(CheckAdsRRsResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/CheckAdsRRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiRRSvcServer is the server API for MultiRRSvc service.
type MultiRRSvcServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetRRTemplate(context.Context, *GetRRTemplateRequest) (*GetRRTemplateResponse, error)
	GetAllRRTemplates(context.Context, *GetAllRRTemplatesRequest) (*GetAllRRTemplatesResponse, error)
	CreateRRTemplate(context.Context, *CreateRRTemplateRequest) (*CreateRRTemplateResponse, error)
	UpdateRRTemplate(context.Context, *UpdateRRTemplateRequest) (*UpdateRRTemplateResponse, error)
	DeleteRRTemplate(context.Context, *DeleteRRTemplateRequest) (*DeleteRRTemplateResponse, error)
	GetAdsRRs(context.Context, *GetAdsRRsRequest) (*GetAdsRRsResponse, error)
	CheckAdsRRs(context.Context, *CheckAdsRRsRequest) (*CheckAdsRRsResponse, error)
}

// UnimplementedMultiRRSvcServer can be embedded to have forward compatible implementations.
type UnimplementedMultiRRSvcServer struct {
}

func (*UnimplementedMultiRRSvcServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedMultiRRSvcServer) GetRRTemplate(context.Context, *GetRRTemplateRequest) (*GetRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRTemplate not implemented")
}
func (*UnimplementedMultiRRSvcServer) GetAllRRTemplates(context.Context, *GetAllRRTemplatesRequest) (*GetAllRRTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRRTemplates not implemented")
}
func (*UnimplementedMultiRRSvcServer) CreateRRTemplate(context.Context, *CreateRRTemplateRequest) (*CreateRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRRTemplate not implemented")
}
func (*UnimplementedMultiRRSvcServer) UpdateRRTemplate(context.Context, *UpdateRRTemplateRequest) (*UpdateRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRRTemplate not implemented")
}
func (*UnimplementedMultiRRSvcServer) DeleteRRTemplate(context.Context, *DeleteRRTemplateRequest) (*DeleteRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRRTemplate not implemented")
}
func (*UnimplementedMultiRRSvcServer) GetAdsRRs(context.Context, *GetAdsRRsRequest) (*GetAdsRRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdsRRs not implemented")
}
func (*UnimplementedMultiRRSvcServer) CheckAdsRRs(context.Context, *CheckAdsRRsRequest) (*CheckAdsRRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdsRRs not implemented")
}

func RegisterMultiRRSvcServer(s *grpc.Server, srv MultiRRSvcServer) {
	s.RegisterService(&_MultiRRSvc_serviceDesc, srv)
}

func _MultiRRSvc_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetRRTemplate(ctx, req.(*GetRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetAllRRTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRRTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetAllRRTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetAllRRTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetAllRRTemplates(ctx, req.(*GetAllRRTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_CreateRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).CreateRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/CreateRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).CreateRRTemplate(ctx, req.(*CreateRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_UpdateRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).UpdateRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/UpdateRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).UpdateRRTemplate(ctx, req.(*UpdateRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_DeleteRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).DeleteRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/DeleteRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).DeleteRRTemplate(ctx, req.(*DeleteRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetAdsRRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsRRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetAdsRRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetAdsRRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetAdsRRs(ctx, req.(*GetAdsRRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_CheckAdsRRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdsRRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).CheckAdsRRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/CheckAdsRRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).CheckAdsRRs(ctx, req.(*CheckAdsRRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultiRRSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MultiRRProto.MultiRRSvc",
	HandlerType: (*MultiRRSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MultiRRSvc_HealthCheck_Handler,
		},
		{
			MethodName: "GetRRTemplate",
			Handler:    _MultiRRSvc_GetRRTemplate_Handler,
		},
		{
			MethodName: "GetAllRRTemplates",
			Handler:    _MultiRRSvc_GetAllRRTemplates_Handler,
		},
		{
			MethodName: "CreateRRTemplate",
			Handler:    _MultiRRSvc_CreateRRTemplate_Handler,
		},
		{
			MethodName: "UpdateRRTemplate",
			Handler:    _MultiRRSvc_UpdateRRTemplate_Handler,
		},
		{
			MethodName: "DeleteRRTemplate",
			Handler:    _MultiRRSvc_DeleteRRTemplate_Handler,
		},
		{
			MethodName: "GetAdsRRs",
			Handler:    _MultiRRSvc_GetAdsRRs_Handler,
		},
		{
			MethodName: "CheckAdsRRs",
			Handler:    _MultiRRSvc_CheckAdsRRs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multirr/multirr_svc.proto",
}
