// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multirr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MultiRRSvcClient is the client API for MultiRRSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiRRSvcClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetRRTemplate(ctx context.Context, in *GetRRTemplateRequest, opts ...grpc.CallOption) (*GetRRTemplateResponse, error)
	GetAllRRTemplates(ctx context.Context, in *GetAllRRTemplatesRequest, opts ...grpc.CallOption) (*GetAllRRTemplatesResponse, error)
	CreateRRTemplate(ctx context.Context, in *CreateRRTemplateRequest, opts ...grpc.CallOption) (*CreateRRTemplateResponse, error)
	UpdateRRTemplate(ctx context.Context, in *UpdateRRTemplateRequest, opts ...grpc.CallOption) (*UpdateRRTemplateResponse, error)
	DeleteRRTemplate(ctx context.Context, in *DeleteRRTemplateRequest, opts ...grpc.CallOption) (*DeleteRRTemplateResponse, error)
	GetAdsRRs(ctx context.Context, in *GetAdsRRsRequest, opts ...grpc.CallOption) (*GetAdsRRsResponse, error)
	CheckAdsRRs(ctx context.Context, in *CheckAdsRRsRequest, opts ...grpc.CallOption) (*CheckAdsRRsResponse, error)
}

type multiRRSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiRRSvcClient(cc grpc.ClientConnInterface) MultiRRSvcClient {
	return &multiRRSvcClient{cc}
}

func (c *multiRRSvcClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetRRTemplate(ctx context.Context, in *GetRRTemplateRequest, opts ...grpc.CallOption) (*GetRRTemplateResponse, error) {
	out := new(GetRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetAllRRTemplates(ctx context.Context, in *GetAllRRTemplatesRequest, opts ...grpc.CallOption) (*GetAllRRTemplatesResponse, error) {
	out := new(GetAllRRTemplatesResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetAllRRTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) CreateRRTemplate(ctx context.Context, in *CreateRRTemplateRequest, opts ...grpc.CallOption) (*CreateRRTemplateResponse, error) {
	out := new(CreateRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/CreateRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) UpdateRRTemplate(ctx context.Context, in *UpdateRRTemplateRequest, opts ...grpc.CallOption) (*UpdateRRTemplateResponse, error) {
	out := new(UpdateRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/UpdateRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) DeleteRRTemplate(ctx context.Context, in *DeleteRRTemplateRequest, opts ...grpc.CallOption) (*DeleteRRTemplateResponse, error) {
	out := new(DeleteRRTemplateResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/DeleteRRTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) GetAdsRRs(ctx context.Context, in *GetAdsRRsRequest, opts ...grpc.CallOption) (*GetAdsRRsResponse, error) {
	out := new(GetAdsRRsResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/GetAdsRRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiRRSvcClient) CheckAdsRRs(ctx context.Context, in *CheckAdsRRsRequest, opts ...grpc.CallOption) (*CheckAdsRRsResponse, error) {
	out := new(CheckAdsRRsResponse)
	err := c.cc.Invoke(ctx, "/MultiRRProto.MultiRRSvc/CheckAdsRRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiRRSvcServer is the server API for MultiRRSvc service.
// All implementations must embed UnimplementedMultiRRSvcServer
// for forward compatibility
type MultiRRSvcServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	GetRRTemplate(context.Context, *GetRRTemplateRequest) (*GetRRTemplateResponse, error)
	GetAllRRTemplates(context.Context, *GetAllRRTemplatesRequest) (*GetAllRRTemplatesResponse, error)
	CreateRRTemplate(context.Context, *CreateRRTemplateRequest) (*CreateRRTemplateResponse, error)
	UpdateRRTemplate(context.Context, *UpdateRRTemplateRequest) (*UpdateRRTemplateResponse, error)
	DeleteRRTemplate(context.Context, *DeleteRRTemplateRequest) (*DeleteRRTemplateResponse, error)
	GetAdsRRs(context.Context, *GetAdsRRsRequest) (*GetAdsRRsResponse, error)
	CheckAdsRRs(context.Context, *CheckAdsRRsRequest) (*CheckAdsRRsResponse, error)
	mustEmbedUnimplementedMultiRRSvcServer()
}

// UnimplementedMultiRRSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMultiRRSvcServer struct {
}

func (UnimplementedMultiRRSvcServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMultiRRSvcServer) GetRRTemplate(context.Context, *GetRRTemplateRequest) (*GetRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRRTemplate not implemented")
}
func (UnimplementedMultiRRSvcServer) GetAllRRTemplates(context.Context, *GetAllRRTemplatesRequest) (*GetAllRRTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRRTemplates not implemented")
}
func (UnimplementedMultiRRSvcServer) CreateRRTemplate(context.Context, *CreateRRTemplateRequest) (*CreateRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRRTemplate not implemented")
}
func (UnimplementedMultiRRSvcServer) UpdateRRTemplate(context.Context, *UpdateRRTemplateRequest) (*UpdateRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRRTemplate not implemented")
}
func (UnimplementedMultiRRSvcServer) DeleteRRTemplate(context.Context, *DeleteRRTemplateRequest) (*DeleteRRTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRRTemplate not implemented")
}
func (UnimplementedMultiRRSvcServer) GetAdsRRs(context.Context, *GetAdsRRsRequest) (*GetAdsRRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdsRRs not implemented")
}
func (UnimplementedMultiRRSvcServer) CheckAdsRRs(context.Context, *CheckAdsRRsRequest) (*CheckAdsRRsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAdsRRs not implemented")
}
func (UnimplementedMultiRRSvcServer) mustEmbedUnimplementedMultiRRSvcServer() {}

// UnsafeMultiRRSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiRRSvcServer will
// result in compilation errors.
type UnsafeMultiRRSvcServer interface {
	mustEmbedUnimplementedMultiRRSvcServer()
}

func RegisterMultiRRSvcServer(s grpc.ServiceRegistrar, srv MultiRRSvcServer) {
	s.RegisterService(&_MultiRRSvc_serviceDesc, srv)
}

func _MultiRRSvc_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetRRTemplate(ctx, req.(*GetRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetAllRRTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRRTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetAllRRTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetAllRRTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetAllRRTemplates(ctx, req.(*GetAllRRTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_CreateRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).CreateRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/CreateRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).CreateRRTemplate(ctx, req.(*CreateRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_UpdateRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).UpdateRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/UpdateRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).UpdateRRTemplate(ctx, req.(*UpdateRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_DeleteRRTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRRTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).DeleteRRTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/DeleteRRTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).DeleteRRTemplate(ctx, req.(*DeleteRRTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_GetAdsRRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsRRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).GetAdsRRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/GetAdsRRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).GetAdsRRs(ctx, req.(*GetAdsRRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiRRSvc_CheckAdsRRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAdsRRsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiRRSvcServer).CheckAdsRRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MultiRRProto.MultiRRSvc/CheckAdsRRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiRRSvcServer).CheckAdsRRs(ctx, req.(*CheckAdsRRsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultiRRSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MultiRRProto.MultiRRSvc",
	HandlerType: (*MultiRRSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _MultiRRSvc_HealthCheck_Handler,
		},
		{
			MethodName: "GetRRTemplate",
			Handler:    _MultiRRSvc_GetRRTemplate_Handler,
		},
		{
			MethodName: "GetAllRRTemplates",
			Handler:    _MultiRRSvc_GetAllRRTemplates_Handler,
		},
		{
			MethodName: "CreateRRTemplate",
			Handler:    _MultiRRSvc_CreateRRTemplate_Handler,
		},
		{
			MethodName: "UpdateRRTemplate",
			Handler:    _MultiRRSvc_UpdateRRTemplate_Handler,
		},
		{
			MethodName: "DeleteRRTemplate",
			Handler:    _MultiRRSvc_DeleteRRTemplate_Handler,
		},
		{
			MethodName: "GetAdsRRs",
			Handler:    _MultiRRSvc_GetAdsRRs_Handler,
		},
		{
			MethodName: "CheckAdsRRs",
			Handler:    _MultiRRSvc_CheckAdsRRs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multirr/multirr_svc.proto",
}
